REQUIREMENTS
============

* Apache HTTP Server (2.x or better) - other PHP enabled web servers should work, 
  yet we have only tested the installation through Apache HTTP Server
* PHP (5.x or better) configured to your web server
   * mysqli extension must be enabled (improved mysql library)
   * GD2 extension must be enabled (GD image library)
   * Enableing the PHP "mbstring" module is recommended
   * If planning to upload specimen data as flat DwC text files, 
     upload_max_filesize (= 2M as default) variable should be increased to 
     match expected files sizes
   * zip extension should be enabled if you plan on uploading compressed data files
* MariaDB or MySQL (5.1 or better)
* GIT Client - not required though can be useful for updates from source code 



INSTRUCTIONS
============
http://symbiota.org/docs/symbiota-introduction/establishing-a-regional-flora-or-fauna/ 

1. Download Symbiota code from GitHub repository
   https://github.com/Symbiota/Symbiota  
   Command line checkout: git clone https://github.com/Symbiota/Symbiota.git
2. Install Symbiota database schema
   a. Create new database 
   b. Create read-only and read/write users for Symbiota database 
   c. Load databse schema from scripts. Schema definition files are  
      located in <SymbiotaBaseFolder>/config/schema-1.0/utf-8/. By default, 
      the database is assumed to be configured to a UTF8 character set.  
      Run db_schema-1.0.sql to install the core table structure. 
      From MySQL commandline: source /BaseFolderPath/config/schema-1.0/utf-8/db_schema-1.0.sql 
   d. Run database patch scripts to bring database up to current structure. 
      Make sure to run the scripts in the correct order 
      (e.g. db_schema_patch_1.0.1.sql, db_schema_patch_1.0.2.sql, etc) 
3. Configure the Symbiota Portal - modify following configuration files
   a. Symbiota configuration - rename 
      /config/symbini_template.php to /config/symbini.php. 
      Modify variables within to match your project environment. See 
      Symbiota configuration help page for more information on this 
      subject.
   b. Database connection - rename 
      /config/dbconnection_template.php to /config/dbconnection.php. 
      modify with readonly and read/write logs, passwords, and schema names.
   c. Homepage - rename /index_template.php to index.php. This is your  
      home page to which will need introductory text, graphics, etc.
   d. Layout - header.php and footer.php are used by all pages to establish 
      uniform layout. menu.php is needed if a left menu is preferred. 
      Within the base installation folder, rename header_template.php and  
      footer_template.php to remove _template from file name.  
      * header.php: Within file, change /images/layout/defaultheader.jpg 
        to /images/layout/header.jpg. Add your header to /images/layout/
        folder. Change /images/layout/defaultleftstrip.gif as desired. 
        Establishing the header using an image is easy, yet more 
        complex header configurations are possible. 
      * footer.php: modify as you did with header.php file.
   e. Files for style control - Go to /css/ and 
      rename main_template.css and speciesprofile_template.css files 
      removing _template from file names. Modify these files to match 
      desired style and layout for all pages. 
4. File permissions - the web server needs write access to the following files and folders
   - All folders in /temp/
   - /webservices/dwc/rss.xml
   - /content/collicon/
   - /content/dwca/
   - /content/logs/


1. Data - The general layers of data within Symbiota are: user, 
   taxonomic, occurrence (specimen), images, checklist, identification 
   key, and taxon profile (common names, text descriptions, etc). 
   While user interfaces have been developed for web management of 
   some of the data layers, others are still in development and data 
   needs to be loaded by hand. Below are detailed instructions on 
   loading the different layers of data needed.
   a. User and permissions - Default administrative user has been 
      installed with following login: username = admin; password: admin.
      Make sure to change password or better yet, create a new admin user 
      (/profile/newprofile.php), assign admin rights (/profile/usermanagement.php), 
      and then delete default admin user. 
   b. Taxonomic Thesaurus - Taxon names are stored within the 'taxa' table. 
      Taxonomic hierarchy and placement definitions are controled in the 
      'taxstatus' table. A recursive data relationship within the 'taxstatus' 
      table defines the taxonomic hierarchy. While multiple taxonomic thesauri 
      can be defined, one of the thesauri needs to function as the central 
      taxonomy. Names must be added in order from upper taxonomic levels to 
      lower (e.g. kingdom, class, order, variety). Accepted names must be 
      loaded before non-accepted names. See Taxonomic Schema Page for more 
      details on taxonomic layout.  
      i. Names can be added one by one to the default thesaurus using: 
         /taxa/admin/taxonomyloader.php. Once entered, taxon names and 
         ranking can be edited via: /taxa/admin/taxonomydisplay.php 
      ii. Batch Loader - Multiple names can be loaded from a flat, 
         tab-delimited text file. See instructions on the Batch Taxon 
         Loader for detailed instructions. See instructions on the 
         batch loader for loading multiple names from a flat file.  
      iii. Look in /config/schema/data/ folder to find taxonomic 
         thesaurus data that may serve as a base for your taxonomic 
         thesaurus.
c. Occurrence (Specimen) Data - to be completed
   i. Loading a new collection
   ii. Establishing method for regular updates
d. Images - to be completed
e. Floristic data - to be completed
f. Identification key data - to be completed
g. Taxon Profile support data (common names, text descriptions, etc) - to be completed


UPDATES
=======
a. Code updates - If you installed through the GitHub using the clone command,  
   code changes and bugs fixes can be integrated into your local checkout 
   using the Git Desktop client of running the "git pull" command
b. Database schema updates - Some php code updates will require database  
   schema modifications. Schema changes can be applied by running new 
   schema patches added since the last update (MySQL command line: 
   source db_schema_patch_1.0.1.sql). Current Symbiota version numbers are 
   listed at the bottom of sitemap.php page. Make sure to run the scripts 
   in the correct order (e.g. db_schema_patch_1.0.1.sql, then 
   db_schema_patch_1.0.2.sql, etc) 
   


* Automatic updates will be enabled once a stable release is made public.
